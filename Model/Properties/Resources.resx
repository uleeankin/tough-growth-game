<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExitControlItem" xml:space="preserve">
    <value>Выход</value>
  </data>
  <data name="GameControlItem" xml:space="preserve">
    <value>Начать игру</value>
  </data>
  <data name="GameRules" xml:space="preserve">
    <value>Tough Growth - это мир геометрических фигур, в котором вы являетесь квадратом. 
Чтобы выиграть нужно стать больше остальных фигур, которые находятся на поле, и съесть их. 
Но нужно быть осторожнее, ведь большие по размеру фигуры будут выдавать различные препятствия 
и сами фигуры будут являться препятствиями. 
При столкновении с ними наступит смерть. ПРЕДУПРЕЖДЕНИЕ: Есть можно только жёлтые фигуры!!! 

В игре есть 10 уровней. Задача игрока – пройти все уровни игры и набрать наименьшее количество «смертей».
«Смерть» игрового квадрата не завершает игру, а заставляет начать неудачный уровень заново до 8 уровня.
Как только вы достигнете 8 уровеня, при каждой «смерти» вас будет отбрасывать на 1 уровень назад. 
Чтобы перейти на следующий уровень необходимо «съесть» все фигуры на поле.</value>
  </data>
  <data name="InfoControlItem" xml:space="preserve">
    <value>Справка</value>
  </data>
  <data name="Level1" xml:space="preserve">
    <value>ИК (50;450) 625
ПСК (900;70) 400
КВ (320;270) 1600
КВ (612;162) 2500</value>
  </data>
  <data name="Level10" xml:space="preserve">
    <value>ИК (475;250) 625
ПСК (800;50) 400
П (567;115) 900 (390;115) (567;115) 1
П (390;398) 900 (390;398) (567;398) 1
П (344;195) 800 (344;195) (356;315) -1
П (613;315) 800 (613;195) (613;315) -1</value>
  </data>
  <data name="Level2" xml:space="preserve">
    <value>ИК (50;450) 625
ПСК (900;70) 400
Ш (500;230) 900</value>
  </data>
  <data name="Level3" xml:space="preserve">
    <value>ИК (50;450) 625
ПСК (900;70) 400
КР (470;240) 2500</value>
  </data>
  <data name="Level4" xml:space="preserve">
    <value>ИК (900;450) 625
ПСК (50;50) 400
Ш (500;230) 900
Ш (690;150) 900
Ш (310;300) 900</value>
  </data>
  <data name="Level5" xml:space="preserve">
    <value>ИК (900;450) 625
ПСК (50;50) 400
КР (912;60) 2500
Ш (600;200) 400
КВ (600;135) 2500
КВ (600;265) 2500
КВ (535;205) 2500
КВ (665;205) 2500
Ш (230;295) 400
КВ (165;300) 2500
КВ (295;300) 2500
КВ (230;235) 2500
КВ (230;365) 2500</value>
  </data>
  <data name="Level6" xml:space="preserve">
    <value>ИК (500;235) 625
ПСК (50;50) 400
КР (500;55) 2500
КР (925;235) 2500
КР (500;435) 2500
КР (55;235) 2500</value>
  </data>
  <data name="Level7" xml:space="preserve">
    <value>ИК (900;450) 625
ПСК (50;50) 400
Ш (500;230) 900
Т (690;150) 1600
Т (310;300) 1600</value>
  </data>
  <data name="Level8" xml:space="preserve">
    <value>ИК (900;450) 625
ПСК (50;50) 400
Ш (300;400) 900
Т (300;200) 1600
Т (700;300) 1600
КР (700;115) 2500</value>
  </data>
  <data name="Level9" xml:space="preserve">
    <value>ИК (50;450) 625
ПСК (900;70) 400
КР (500;255) 2500
Ш (180;150) 800
Т (70;70) 900
П (70;255) 900 (70;255) (400;255) 1
П (915;255) 900 (600;255) (915;255) 1
П (500;160) 800 (500;70) (500;100) -1</value>
  </data>
  <data name="MainMenuControlItem" xml:space="preserve">
    <value>Главное меню</value>
  </data>
  <data name="ManagementRules" xml:space="preserve">
    <value>Управление меню осуществляется с помощью стрелок клавиатуры "Вверх", "Вниз".
С помощью этих клавиш происходит переключение фокуса мажду пунктами меню.
Подтверждение перехода осуществляется с помощью клавиши Enter.
Во время игры управление происходит с помощью стрелок клавиатуры:
"Вверх", "Вниз", "Вправо", "Влево".
Достаточно нажать и отпутить клавишу и игровой квадрат начнёт двигаться в нужную сторону,
пока не будет нажата стрелка другого направления.</value>
  </data>
  <data name="RecordsControlItem" xml:space="preserve">
    <value>Рекорды</value>
  </data>
  <data name="RecordsFileName" xml:space="preserve">
    <value>records.txt</value>
  </data>
  <data name="TitlePassiveItem" xml:space="preserve">
    <value>TOUGH GROWTH</value>
  </data>
</root>